import sys
from typing import Any, Optional

from . import common


def map_as_list(func: Any, iter: Any) -> Any: ...

ALLOW_IMPORTLIB_MODE: Any

class Stat:
    def __getattr__(self, name: Any) -> Any: ...
    path: Any = ...
    def __init__(self, path: Any, osstatresult: Any) -> None: ...
    @property
    def owner(self) -> None: ...
    @property
    def group(self) -> None: ...
    def isdir(self) -> None: ...
    def isfile(self) -> None: ...
    def islink(self) -> None: ...

class PosixPath(common.PathBase):
    def chown(self, user: Any, group: Any, rec: int=...) -> Any: ...
    def readlink(self) -> None: ...
    def mklinkto(self, oldname: Any) -> None: ...
    def mksymlinkto(self, value: Any, absolute: int=...) -> None: ...

def getuserid(user: Any) -> Any: ...
def getgroupid(group: Any) -> Any: ...

# FSBase = not iswin32 and PosixPath or common.PathBase
if sys.platform != 'win32':
    FSBase = PosixPath
else:
    FSBase = common.PathBase

class LocalPath(FSBase):
    class ImportMismatchError(ImportError): ...
    sep: Any = ...
    class Checkers(common.Checkers):
        def dir(self) -> None: ...
        def file(self) -> None: ...
        def exists(self) -> None: ...
        def link(self) -> None: ...
    def __init__(self, path: Optional[Any]=..., expanduser: bool=...) -> None: ...
    def __hash__(self) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def samefile(self, other: Any) -> Any: ...
    def remove(self, rec: int=..., ignore_errors: bool=...) -> None: ...
    def computehash(self, hashtype: str=..., chunksize: int=...) -> Any: ...
    def new(self, **kw: Any) -> Any: ...
    def dirpath(self, *args: Any, **kwargs: Any) -> Any: ...
    def join(self, *args: Any, **kwargs: Any) -> Any: ...
    def open(self, mode: str=..., ensure: bool=..., encoding: Optional[Any]=...) -> Any: ...
    def islink(self) -> None: ...
    def check(self, **kw: Any) -> Any: ...
    def listdir(self, fil: Optional[Any]=..., sort: Optional[Any]=...) -> Any: ...
    def size(self) -> None: ...
    def mtime(self) -> None: ...
    def copy(self, target: Any, mode: bool=..., stat: bool=...) -> Any: ...
    def rename(self, target: Any) -> Any: ...
    def dump(self, obj: Any, bin: int=...) -> None: ...
    def mkdir(self, *args: Any) -> Any: ...
    def write_binary(self, data: Any, ensure: bool=...) -> None: ...
    def write_text(self, data: Any, encoding: Any, ensure: bool=...) -> None: ...
    def write(self, data: Any, mode: str=..., ensure: bool=...) -> None: ...
    def ensure(self, *args: Any, **kwargs: Any) -> Any: ...
    def stat(self, raising: bool=...) -> Any: ...
    def lstat(self) -> None: ...
    def setmtime(self, mtime: Optional[Any]=...) -> Any: ...
    def chdir(self) -> None: ...
    def as_cwd(self) -> None: ...
    def realpath(self) -> None: ...
    def atime(self) -> None: ...
    def chmod(self, mode: Any, rec: int=...) -> None: ...
    def pypkgpath(self) -> None: ...
    def pyimport(self, modname: Optional[Any]=..., ensuresyspath: bool=...) -> Any: ...
    def sysexec(self, *argv: Any, **popen_opts: Any) -> Any: ...
    def sysfind(cls: Any, name: Any, checker: Optional[Any]=..., paths: Optional[Any]=...) -> Any: ...
    sysfind: Any = ...
    @classmethod
    def get_temproot(cls) -> None: ...
    @classmethod
    def mkdtemp(cls: Any, rootdir: Optional[Any]=...) -> Any: ...
    def make_numbered_dir(prefix: str=..., rootdir: Optional[Any]=..., keep: Optional[int]=..., lock_timeout: int=...) -> Any: ...

def copymode(src: Any, dest: Any) -> None: ...
def copystat(src: Any, dest: Any) -> None: ...
def copychunked(src: Any, dest: Any) -> None: ...
def isimportable(name: Any) -> Any: ...
